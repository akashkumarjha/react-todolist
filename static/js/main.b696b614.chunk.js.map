{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","fSubmit","e","preventDefault","console","log","datas","state","name","refs","value","address","act","data","push","index","setState","myForm","reset","focus","fRemove","i","splice","fEdit","title","this","className","ref","type","placeholder","onClick","id","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8NA+HeA,G,wDA3Hb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,QAAU,SAACC,GACTA,EAAEC,iBACFC,QAAQC,IAAI,OAEZ,IAAIC,EAAQ,EAAKC,MAAMD,MACnBE,EAAO,EAAKC,KAAKD,KAAKE,MACtBC,EAAU,EAAKF,KAAKE,QAAQD,MAEhC,GAAuB,IAAnB,EAAKH,MAAMK,IAAW,CAExB,IAAIC,EAAO,CACTL,OACAG,WAEFL,EAAMQ,KAAKD,OACN,CAEL,IAAIE,EAAQ,EAAKR,MAAMQ,MACvBT,EAAMS,GAAOP,KAAOA,EACpBF,EAAMS,GAAOJ,QAAUA,EAGzB,EAAKK,SAAS,CACZV,MAAOA,EACPM,IAAK,IAGP,EAAKH,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAxCE,EA2CnBC,QAAU,SAACC,GACT,IAAIf,EAAQ,EAAKC,MAAMD,MACvBA,EAAMgB,OAAOD,EAAG,GAChB,EAAKL,SAAS,CACZV,MAAOA,IAET,EAAKG,KAAKQ,OAAOC,QACjB,EAAKT,KAAKD,KAAKW,SAlDE,EAoDnBI,MAAQ,SAACF,GACP,IAAIR,EAAO,EAAKN,MAAMD,MAAMe,GAC5B,EAAKZ,KAAKD,KAAKE,MAAQG,EAAKL,KAC5B,EAAKC,KAAKE,QAAQD,MAAQG,EAAKF,QAE/B,EAAKK,SAAS,CACZJ,IAAK,EACLG,MAAOM,KAzDT,EAAKd,MAAQ,CACXiB,MAAO,gCACPZ,IAAK,EACLG,MAAO,GACPT,MAAO,IANQ,E,gEAUjBmB,KAAKhB,KAAKD,KAAKW,U,+BAoDP,IAAD,OACHb,EAAQmB,KAAKlB,MAAMD,MACvB,OACE,yBAAKoB,UAAU,OACb,4BAAKD,KAAKlB,MAAMiB,OAChB,0BAAMG,IAAI,SAASD,UAAU,UAC3B,2BACEE,KAAK,OACLD,IAAI,OACJE,YAAY,aACZH,UAAU,cAEZ,2BACEE,KAAK,OACLD,IAAI,UACJE,YAAY,gBACZH,UAAU,cAEZ,4BAAQI,QAAS,SAAC5B,GAAD,OAAO,EAAKD,QAAQC,IAAIwB,UAAU,YAAnD,WAIF,yBAAKA,UAAU,aACb,2BAAOK,GAAG,OACR,4BACE,uCACA,oCACA,uCACA,sCACA,qCAEDzB,EAAM0B,KAAI,SAACnB,EAAMQ,GAAP,OACT,wBAAIY,IAAKZ,GACP,4BAAKA,EAAI,GACT,4BAAKR,EAAKL,MACV,4BAAKK,EAAKF,SACV,4BACE,4BACEmB,QAAS,kBAAM,EAAKV,QAAQC,IAC5BK,UAAU,gBAFZ,WAOF,4BACE,4BACEI,QAAS,kBAAM,EAAKP,MAAMF,IAC1BK,UAAU,gBAFZ,oB,GA5GAQ,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.b696b614.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"React Simple CRUD Application\",\n      act: 0,\n      index: \"\",\n      datas: [],\n    };\n  }\n  componentDidMount() {\n    this.refs.name.focus();\n  }\n  fSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"try\");\n\n    let datas = this.state.datas;\n    let name = this.refs.name.value;\n    let address = this.refs.address.value;\n\n    if (this.state.act === 0) {\n      //for new data\n      let data = {\n        name,\n        address,\n      };\n      datas.push(data);\n    } else {\n      //for edit\n      let index = this.state.index;\n      datas[index].name = name;\n      datas[index].address = address;\n    }\n\n    this.setState({\n      datas: datas,\n      act: 0,\n    });\n\n    this.refs.myForm.reset();\n    this.refs.name.focus();\n  };\n\n  fRemove = (i) => {\n    let datas = this.state.datas;\n    datas.splice(i, 1);\n    this.setState({\n      datas: datas,\n    });\n    this.refs.myForm.reset();\n    this.refs.name.focus();\n  };\n  fEdit = (i) => {\n    let data = this.state.datas[i];\n    this.refs.name.value = data.name;\n    this.refs.address.value = data.address;\n\n    this.setState({\n      act: 1,\n      index: i,\n    });\n  };\n  render() {\n    let datas = this.state.datas;\n    return (\n      <div className=\"App\">\n        <h1>{this.state.title}</h1>\n        <form ref=\"myForm\" className=\"myForm\">\n          <input\n            type=\"text\"\n            ref=\"name\"\n            placeholder=\"Enter Name\"\n            className=\"formField\"\n          />\n          <input\n            type=\"text\"\n            ref=\"address\"\n            placeholder=\"Enter Address\"\n            className=\"formField\"\n          />\n          <button onClick={(e) => this.fSubmit(e)} className=\"myButton\">\n            Submit\n          </button>\n        </form>\n        <div className=\"myListBox\">\n          <table id=\"t01\">\n            <tr>\n              <th>Sl. No.</th>\n              <th>Name</th>\n              <th>Address</th>\n              <th>Remove</th>\n              <th>Edit</th>\n            </tr>\n            {datas.map((data, i) => (\n              <tr key={i}>\n                <td>{i + 1}</td>\n                <td>{data.name}</td>\n                <td>{data.address}</td>\n                <td>\n                  <button\n                    onClick={() => this.fRemove(i)}\n                    className=\"myListButton\"\n                  >\n                    Remove\n                  </button>\n                </td>\n                <td>\n                  <button\n                    onClick={() => this.fEdit(i)}\n                    className=\"myListButton\"\n                  >\n                    Edit\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}